services:
#  api:
#    container_name: api
#    build:
#      context: ./
#    volumes:
#      - ./:/app
#    ports:
#      - 8000:8000
#    environment:
#      DATABASE_URL: ${DATABASE_URL}
#  db:
#    container_name: db
#    image: postgres:13.2
#    restart: unless-stopped
#    volumes:
#      - /var/run/postgres/postgres.sock:/var/run/postgres/postgres.sock
#      - db-volume:/var/lib/postgresql/data
#    ports:
#        - 5432:5432
#    environment:
#        POSTGRES_PASSWORD: postgres
#    healthcheck:
#      test: ["CMD-SHELL", "pg_isready -U postgres"]
#      interval: 5s
#      timeout: 5s
#      retries: 5
  postgres:
    image: debezium/postgres:13
    container_name: postgres
    ports:
      - 5432:5432
    environment:
        POSTGRES_PASSWORD: postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 2s
      timeout: 20s
      retries: 10

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  debezium:
    image: debezium/connect:latest
    container_name: debezium
    depends_on:
      - kafka
      - postgres
    ports:
      - 8083:8083
    environment:
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: my_connect_configs
      OFFSET_STORAGE_TOPIC: my_connect_offsets
      STATUS_STORAGE_TOPIC: my_connect_statuses
      BOOTSTRAP_SERVERS: kafka:9092
      DATABASE_HOSTNAME: postgres
      DATABASE_PORT: 5432
      DATABASE_USER: postgres
      DATABASE_PASSWORD: postgres
      DATABASE_DBNAME: postgres
      DATABASE_SERVER_NAME: postgres
      DATABASE_INCLUDE: public
      DATABASE_HISTORY_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      DATABASE_HISTORY_KAFKA_TOPIC: dbhistory.fullfillment
volumes:
  db-volume:
